{"version":3,"file":"static/js/6.6d2ff8ef.chunk.js","mappings":"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","sources":["Components/Button.styled.js","Components/Container.styled.js","Components/ModalWindow/ContainerImg.styled.js","Components/ModalWindow/DivActions.styled.js","Components/ModalWindow/ModalInfoContainer.styled.js","api.js","Components/MovieList/MovieList.styled.js","Components/ModalWindow/Modal.styled.js","Components/ModalWindow/Overlay.styled.js","Components/ModalWindow/CloseButton.styled.js","Components/ModalWindow/ModalMovieInfo.jsx","Components/MovieList/MovieList.jsx","Pages/Home.jsx"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button(() => {\r\n    return ({\r\n        padding: '8px',\r\n        backgroundColor: 'grey',\r\n        border: 'none',\r\n        borderRadius: '5px',\r\n        fontWeight: '500',\r\n        cursor: 'pointer',\r\n        '&:hover': {\r\n            backgroundColor: 'blue',\r\n            color: 'white',\r\n        }\r\n    })\r\n})","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div(() => {\r\n    return ({\r\n        minHeight: '100vh',\r\n        maxWidth: '1200px',\r\n        backgroundColor: 'transparent',\r\n        position: 'relative',\r\n        top: 0,\r\n        textAlign: 'center',\r\n        paddingBottom: '20px',\r\n    })\r\n})","import styled from \"styled-components\";\r\n\r\nexport const ContainerImg = styled.div(() => {\r\n    return ({\r\n        minWidth: '200px',\r\n        maxWidth: '200px',\r\n        height: '400px',\r\n        overflow: 'hidden',\r\n        borderRadius: '5px',\r\n        img: {\r\n            width: '100%',\r\n            height: '300px',\r\n            objectFit: 'cover',\r\n\r\n        }\r\n    })\r\n})","import styled from \"styled-components\"\r\n\r\nexport const DivActions = styled.div(() => {\r\n    return ({\r\n        width: '100%',\r\n        // padding: '15px',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        gap: '15px',\r\n        button: {\r\n            width: '100%',\r\n        },\r\n        'a:hover': {\r\n            color: 'blue',\r\n        }\r\n    })\r\n})","import styled from \"styled-components\";\r\n\r\nexport const ModalInfoContainer = styled.div(() => {\r\n    return ({\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        // justifyContent: 'center',\r\n        // alignItems: 'center',\r\n    })\r\n})","import axios from \"axios\";\r\n\r\nconst optionsAxios = {\r\n    baseURL: 'https://api.themoviedb.org/3/',\r\n    headers: {\r\n    accept: 'application/json',\r\n    Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmNjE2MjdjOWNmYzQ5YjY0MDUxZmE4ZWU2NGFmMDM4MSIsInN1YiI6IjY1N2Q4NDZiYjdmYmJkMDZjODMwNTVkZSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.7NWSj1-y7xBlR5IWWT6t3fEcBUOHkAiJumA6Nwpm4FQ'\r\n  }\r\n}\r\n\r\nasync function fetchMovies (page){\r\n  return await axios.get(`/movie/popular?page=${page}`, optionsAxios);\r\n   \r\n};\r\n\r\nasync function fetchMovieByWord(searchWord, page) {\r\n  return await axios.get(`/search/movie?query=${searchWord}&page=${page}`, optionsAxios)\r\n}\r\n\r\nasync function fetchMovieDetails(movie_id) {\r\n  return await axios.get(`movie/${movie_id}`, optionsAxios);\r\n}\r\nexport { fetchMovies, fetchMovieByWord, fetchMovieDetails};","import styled from \"styled-components\";\r\n\r\nexport const MoviesListStyled = styled.ul(() => {\r\n    return ({\r\n        listStyle: 'none',\r\n        textAlign: 'center',\r\n        padding: '20px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        gap: '15px',\r\n        li: {\r\n            paddingBottom: '8px',\r\n            position: 'relative',\r\n            objectFit: 'cover',\r\n            boxShadow: 'rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px',\r\n            width: '150px',\r\n            border: 'solid 1px lightgrey',\r\n            borderRadius: '6px',\r\n            overflow: 'hidden',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            gap: '8px',\r\n            alignItems: 'center',\r\n            \r\n            div: {\r\n                width: '100%',\r\n                height: '200px',\r\n                overflow: 'hidden',\r\n                 img: {\r\n                width: '100%',\r\n                height: '100%',\r\n                objectFit: 'cover',\r\n                transition: \"transform 1000ms easy-out\",\r\n                },\r\n            },\r\n        },\r\n        'li:hover': {\r\n            color: 'blue',\r\n            fontWeight: '700',\r\n            img: {\r\n                transform: 'scale(1.1)'\r\n            },\r\n        }\r\n        \r\n    })\r\n});","import styled from \"styled-components\"\r\n\r\nexport const Modal = styled.div(() => {\r\n    return ({\r\n        position: 'fixed',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        backgroundColor: '#FFF',\r\n        zIndex: '1000',\r\n        padding: '15px',\r\n        display: 'flex',\r\n        gap: '15px',\r\n        minWidth: '300px',\r\n    })\r\n})","import styled from \"styled-components\"\r\n\r\nexport const Overlay= styled.div(() => {\r\n    return ({\r\n        position: 'fixed',\r\n        top: '0',\r\n        left: '0',\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: 'rgba(0, 0, 0, .7)',\r\n        zIndex: '1000',\r\n    })\r\n})","import styled from \"styled-components\";\r\n\r\nexport const CloseButton = styled.button(() => {\r\n    return ({\r\n        position: 'absolute',\r\n        top: '15px',\r\n        right: '15px',\r\n        width: '20px',\r\n        height: '20px',\r\n        border: 'none',\r\n        borderRadius: '4px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: 'grey',\r\n        fill: 'white',\r\n        '&:hover': {\r\n            backgroundColor: 'blue',\r\n        }\r\n    })\r\n})","import { useContext, useEffect, useState } from \"react\";\r\nimport { Modal } from \"./Modal.styled\";\r\nimport { Overlay } from \"./Overlay.styled\";\r\nimport ReactDom from 'react-dom';\r\nimport { fetchMovieDetails } from \"../../api\";\r\nimport { CloseButton } from \"./CloseButton.styled\";\r\nimport { ModalInfoContainer } from \"./ModalInfoContainer.styled\";\r\nimport { ContainerImg } from \"./ContainerImg.styled\";\r\nimport { Button } from \"../Button.styled\";\r\nimport { DivActions } from \"./DivActions.styled\";\r\nimport { ListContext } from \"../Context/Context\";\r\nimport { Notify } from \"notiflix\";\r\n\r\nexport const ModalMovieInfo = ({onClose, movieId }) => {\r\n    const [movieInfo, setMovieInfo] = useState(null);\r\n    const { addMovieToList } = useContext(ListContext);\r\n    const { removeMovieFromList } = useContext(ListContext);\r\n    const { movieList } = useContext(ListContext);\r\n    const defaultImg = 'https://img.freepik.com/free-vector/cinema-realistic-poster-with-illuminated-bucket-popcorn-drink-3d-glasses-reel-tickets-blue-background-with-tapes-vector-illustration_1284-77070.jpg';\r\n\r\n\r\n    useEffect(() => {\r\n        async function getMovieInfo() {\r\n            try {\r\n                const resp = await fetchMovieDetails(movieId);\r\n                setMovieInfo(resp.data);\r\n            } catch (error) {\r\n                Notify.failure(\"Something went wrong( Try reload the page)))\")\r\n\r\n            }\r\n        }\r\n        getMovieInfo();\r\n    }, [movieId])\r\n    return ReactDom.createPortal(\r\n        <Overlay onClick={onClose}>\r\n        { movieInfo && (\r\n            \r\n                <Modal onClick={(event) => {event.stopPropagation()}}>\r\n                    <CloseButton type='button' onClick={onClose}><svg height=\"15px\" viewBox=\"0 0 512 512\" width=\"15px\"><path d=\"M443.6,387.1L312.4,255.4l131.5-130c5.4-5.4,5.4-14.2,0-19.6l-37.4-37.6c-2.6-2.6-6.1-4-9.8-4c-3.7,0-7.2,1.5-9.8,4  L256,197.8L124.9,68.3c-2.6-2.6-6.1-4-9.8-4c-3.7,0-7.2,1.5-9.8,4L68,105.9c-5.4,5.4-5.4,14.2,0,19.6l131.5,130L68.4,387.1  c-2.6,2.6-4.1,6.1-4.1,9.8c0,3.7,1.4,7.2,4.1,9.8l37.4,37.6c2.7,2.7,6.2,4.1,9.8,4.1c3.5,0,7.1-1.3,9.8-4.1L256,313.1l130.7,131.1  c2.7,2.7,6.2,4.1,9.8,4.1c3.5,0,7.1-1.3,9.8-4.1l37.4-37.6c2.6-2.6,4.1-6.1,4.1-9.8C447.7,393.2,446.2,389.7,443.6,387.1z\"/></svg></CloseButton>\r\n                    <ContainerImg>\r\n                    <img src={movieInfo.poster_path ? `https://image.tmdb.org/t/p/w500/${movieInfo.poster_path}` : defaultImg} alt={movieInfo.title || movieInfo.name} />\r\n                        <DivActions>\r\n                            {movieList?.find(item => item.id === movieInfo.id)\r\n                                ? (<Button type='button' onClick={() => removeMovieFromList(movieInfo.id)}>Remove from your list</Button>)\r\n                                : (<Button type='button' onClick={() => addMovieToList(movieInfo)}>Add in your list</Button>)}\r\n                            {movieInfo.homepage && (<a href={movieInfo.homepage} target='_blank' rel='noreferrer'>See more (homepage)</a>)}\r\n\r\n                        </DivActions>\r\n                    </ContainerImg>\r\n                    <ModalInfoContainer>\r\n                        <h2>{movieInfo.title || movieInfo.name}</h2>\r\n                        <p>{movieInfo.overview}</p>\r\n                    \r\n                        </ModalInfoContainer>\r\n                    \r\n                </Modal>)}\r\n            </Overlay>,\r\n    document.getElementById('portal')\r\n    )\r\n};","import { useEffect, useState } from \"react\";\r\nimport { fetchMovieByWord, fetchMovies } from \"../../api\";\r\nimport { MoviesListStyled } from \"./MovieList.styled\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { ModalMovieInfo } from \"../ModalWindow/ModalMovieInfo\";\r\nimport { Button } from \"../Button.styled\";\r\nimport {CircleArrow} from \"react-scroll-up-button\";\r\nimport { Notify } from \"notiflix\";\r\n\r\nexport const MovieList = ({ searchWord = '' }) => {\r\n    const [movies, setMovies] = useState(null);\r\n    const [allVisible, setAllVisible] = useState(null);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [movieId, setMovieId] = useState(null);\r\n    const [page, setPage] = useState(1);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const defaultImg = 'https://img.freepik.com/free-vector/cinema-realistic-poster-with-illuminated-bucket-popcorn-drink-3d-glasses-reel-tickets-blue-background-with-tapes-vector-illustration_1284-77070.jpg';\r\n\r\n    useEffect(() => {\r\n        async function getMovies() {\r\n            if (searchWord) {\r\n                if (page === 1 && !movies) {\r\n                    try {\r\n                        const resp = await fetchMovieByWord(searchWord, page);\r\n                        if (resp.data.results.length === 0) {\r\n                            setMovies(null);\r\n                            setAllVisible(null);\r\n                            Notify.failure(\"There are no movies( Try reload the page)))\")\r\n                            return;\r\n                        }\r\n                        setMovies(resp.data.results);\r\n                        setAllVisible(resp.data.results);\r\n                        setTotalPages(resp.data.total_pages);\r\n                    }\r\n                    catch (error) { }\r\n                }\r\n                 else if(page!==1 && movies) {\r\n                    try {\r\n                        const resp = await fetchMovieByWord(searchWord, page);\r\n                        setAllVisible([...movies, ...resp.data.results]);\r\n                    } catch (error) {\r\n                        console.log(error.message);\r\n                    }\r\n                    \r\n                }\r\n            }\r\n               \r\n            else {\r\n                if (page === 1 && !movies) {\r\n                    try {\r\n            const resp = await fetchMovies(page);\r\n            setMovies(resp.data.results);\r\n            setAllVisible(resp.data.results);\r\n            setTotalPages(resp.data.total_pages);\r\n                        \r\n        } catch (error) {\r\n            Notify.failure('Something went wrong(( Try reload the page');\r\n        }\r\n    }\r\n    else if (page !== 1 && movies) {\r\n        try {\r\n            const resp = await fetchMovies(page);\r\n            setAllVisible([...movies, ...resp.data.results]);\r\n                        \r\n        } catch (error) {\r\n             Notify.failure('Something went wrong(( Try reload the page');\r\n        }\r\n                    \r\n    }}\r\n                \r\n        }\r\n        getMovies();  \r\n    }, [searchWord, page, movies])\r\n    \r\n    return (\r\n        allVisible && (\r\n            <>\r\n               \r\n                <MoviesListStyled>\r\n            {allVisible.map((item) => (\r\n                <li key={nanoid()} id={item.id} onClick={() => { setIsOpen(true);  setMovieId(item.id)}}>\r\n                    <div><img src={item.poster_path ? `https://image.tmdb.org/t/p/w500/${item.poster_path}` : defaultImg} alt={item.title || item.name} width={150} /></div>{item.title || item.name}\r\n                </li>\r\n            ))}\r\n                </MoviesListStyled>\r\n                {(page < totalPages) ? (<Button type=\"button\" onClick={() => { setPage(page + 1); setMovies([...allVisible]) }}>See more...</Button>)\r\n                : Notify.info(\"There are all movies\")}    \r\n                {(isOpen && movieId) && (<ModalMovieInfo onClose={() => setIsOpen(false)} movieId={movieId} />)}\r\n                <CircleArrow style={{ width: '50px',  height: '50px', fill: '#6A5ACD', borderColor: '#6A5ACD', backgroundColor: '#EFFD5F'}}></CircleArrow>\r\n            </>\r\n        )\r\n        \r\n    )\r\n}","import { Container } from \"../Components/Container.styled\";\r\nimport { MovieList } from \"../Components/MovieList/MovieList\";\r\n\r\n\r\nconst Home = () => {\r\n\r\n    return (\r\n        <Container>\r\n            <h1>Popular movies</h1>\r\n            <MovieList />\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default Home;"],"names":["Button","styled","button","padding","backgroundColor","border","borderRadius","fontWeight","cursor","color","Container","div","minHeight","maxWidth","position","top","textAlign","paddingBottom","ContainerImg","minWidth","height","overflow","img","width","objectFit","DivActions","display","flexDirection","justifyContent","alignItems","gap","ModalInfoContainer","optionsAxios","baseURL","headers","accept","Authorization","async","fetchMovies","page","axios","get","concat","fetchMovieByWord","searchWord","MoviesListStyled","ul","listStyle","flexWrap","li","boxShadow","transition","transform","Modal","left","zIndex","Overlay","CloseButton","right","fill","ModalMovieInfo","_ref","onClose","movieId","movieInfo","setMovieInfo","useState","addMovieToList","useContext","ListContext","removeMovieFromList","movieList","useEffect","resp","movie_id","fetchMovieDetails","data","error","Notify","failure","getMovieInfo","ReactDom","_jsx","onClick","children","_jsxs","event","stopPropagation","type","viewBox","d","src","poster_path","alt","title","name","find","item","id","homepage","href","target","rel","overview","document","getElementById","MovieList","movies","setMovies","allVisible","setAllVisible","isOpen","setIsOpen","setMovieId","setPage","totalPages","setTotalPages","results","console","log","message","length","total_pages","getMovies","_Fragment","map","nanoid","info","CircleArrow","style","borderColor","Home"],"sourceRoot":""}